# -*- coding: utf-8 -*-
"""Neural Style transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TLWK4Lk6g0M7kawwPCCbUDIHnhNwhIrT
"""

import torch
from torchvision import transforms,models
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

model = models.vgg19(pretrained=True).features
for param in model.parameters():
  param.requires_grad_(False)

def content_cost(gen_layer,con_layer):
    _,n_C,n_H,n_W = gen_layer.shape
    j = torch.sum(torch.square(torch.sub(gen_layer,con_layer)))/(n_H*n_C*n_W)
    return j

def gram_matrix(layer_features):
   _,n_C,n_H,n_W = layer_features.shape
   matrix = torch.reshape(layer_features,(n_C,n_H*n_W))
   grammatrix = torch.matmul(matrix,matrix.T)
   return grammatrix

def style_cost(style_features,generated_features):
  gram_style = gram_matrix(style_features)
  gram_gen = gram_matrix(generated_features)
  n_C,n_HXn_W = gram_style.shape 
  j = torch.sum(torch.square(torch.sub(gram_gen,gram_style)))/((n_HXn_W)**2 * (n_C)**2)
  return j

device = torch.device('cuda'if torch.cuda.is_available() else 'cpu')
model.to(device)

def load_img(img_path,maxsize = 400 , shape = None):
  img = Image.open(img_path).convert('RGB')
  if max(img.size)>maxsize:
    size = maxsize
  else:
    size = max(img.size) 
  if shape is not None:
    size = shape
  transform = transforms.Compose([transforms.Resize(size),
                                  transforms.ToTensor(),
                                  transforms.Normalize((0.485,0.456,0.406),(0.229,0.224,0.225))])
  img = transform(img)[:3,:,:].unsqueeze(0)
  return img

content_img = load_img('/content/drive/My Drive/dog-puppy-on-garden-royalty-free-image-1586966191.jpg').to(device)
style_img = load_img('/content/drive/My Drive/picasso-paper-royal-academy-5437-10.jpg',shape = content_img.shape[-2:]).to(device)

def im_show(tensor_img):
  img = tensor_img.to('cpu').clone().detach()
  img = img.numpy().squeeze()
  img = img.transpose(1,2,0)
  img = img*np.array((0.229,0.224,0.225)) + np.array((0.485,0.456,0.406))
  img = img.clip(0,1)
  return img

fig , (ax1,ax2) = plt.subplots(1,2)
ax1.imshow(im_show(content_img))
ax2.imshow(im_show(style_img))

print(model)

def get_features(image,model,layers=None):
  if layers is None:
    layers = {'0':'conv1_1',
              '5':'conv2_1',
              '10':'conv3_1',
              '19':'conv4_1',
              '21':'conv4_2',
              '28':'conv5_1'}
  features = {}
  img = image 
  for name, layer in model._modules.items():
    img = layer(img)
    if name in layers:
      features[layers[name]] = img
  return features

def total_loss(alpha,beta,content_loss,style_loss):
  J = alpha * content_loss + beta * style_loss
  return J

def each_layer_weights():
  weights = {'conv1_1': 1.,
             'conv2_1':0.8,
             'conv3_1':0.5,
             'conv4_1':0.3,
             'conv5_1':0.1}
  return  weights

weights = each_layer_weights()

def optimization(con_image,generated_image,style_img,model,epochs,learning_rate = 0.01):
  con_features = get_features(con_image,model)
  sty_features = get_features(style_img,model)
  opti  = torch.optim.Adam([generated_image],lr = learning_rate)
  for e in range(epochs):
    gen_features = get_features(generated_image,model)
    con_loss = content_cost(gen_features['conv4_2'],con_features['conv4_2'])
    ini_sty_loss = 0
    for layer in each_layer_weights():
      sty_loss = weights[layer]*style_cost(sty_features[layer],gen_features[layer])
      ini_sty_loss += sty_loss
    total_cost = total_loss(1,1e2,con_loss,ini_sty_loss)
    opti.zero_grad()
    total_cost.backward()
    opti.step()

    if e % 400 == 0:
      print('Total loss:',total_cost.item())
      plt.imshow(im_show(generated_image))
      plt.show()

generated_image = content_img.clone().requires_grad_(True).to(device)

optimization(content_img,generated_image,style_img,model,2000,0.1)

con2_img = load_img('/content/drive/My Drive/Cat03.jpg').to(device)
sty2_img = load_img('/content/drive/My Drive/candy.jpg',shape=con2_img.shape[-2:]).to(device)

fig , (ax1,ax2) = plt.subplots(1,2)
ax1.imshow(im_show(con2_img))
ax2.imshow(im_show(sty2_img))

gen2_img = con2_img.clone().requires_grad_(True).to(device)

optimization(con2_img,gen2_img,sty2_img,model,2000,0.1)

con3_img = load_img('/content/drive/My Drive/2020-05-18.jpg').to(device)

gen3_img = con3_img.clone().requires_grad_(True).to(device)

optimization(con3_img,gen3_img,sty2_img,model,2000,0.1)

